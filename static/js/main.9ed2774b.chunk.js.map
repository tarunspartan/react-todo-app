{"version":3,"sources":["components/Input/Input.module.css","components/Button/Button.module.css","components/Button/Button.js","components/List/List.js","components/Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","className","styles","Button","onClick","clicked","children","list","Input","state","items","inputValue","buttonClickedHandler","input","setState","concat","getValueHandler","e","target","value","data","this","map","item","index","key","type","id","onChange","required","List","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,oOCMZC,EAJA,SAACC,GAAD,OACP,4BAAQC,UAAWC,IAAOC,OAAQC,QAASJ,EAAMK,SAAUL,EAAMM,WCM1DC,EALF,SAACP,GAAD,OACR,6BAAMA,EAAMM,WCiCFE,E,2MA/BXC,MAAQ,CACJC,MAAQ,GACRC,WAAa,I,EAGjBC,qBAAuB,WACnB,IAAIC,EAAQ,EAAKJ,MAAME,WACvB,EAAKG,SAAS,CAACJ,MAAO,EAAKD,MAAMC,MAAMK,OAAOF,M,EAGlDG,gBAAkB,SAACC,GACf,EAAKH,SAAS,CAACH,WAAYM,EAAEC,OAAOC,S,wEAKpC,IAAMC,EAAOC,KAAKZ,MAAMC,MAAMY,KAAI,SAACC,EAAKC,GACpC,OAAO,uBAAGC,IAAKD,GAAQD,MAI3B,OACI,6BACA,2BAAOtB,UAAWC,IAAOM,MAAOkB,KAAK,OAAOC,GAAG,QAAQC,SAAUP,KAAKL,gBAAiBa,UAAQ,IAC/F,kBAAC1B,EAAD,CAAQE,QAASgB,KAAKT,sBAAsB,iCAC5C,kBAACkB,EAAD,KAAOV,Q,GA3BCW,aCOLC,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCIcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ed2774b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3OQIc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__ATGL8\"};","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nconst button = (props) => (\r\n        <button className={styles.Button} onClick={props.clicked}>{props.children}</button>\r\n);\r\n\r\nexport default button;","import React from 'react';\r\n\r\n// import Button from '../Button/Button';\r\n\r\n\r\nconst list = (props) => (\r\n     <div>{props.children}</div>\r\n        \r\n);\r\n\r\nexport default list;","import React, { Component } from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nimport Button from '../Button/Button';\r\nimport List from '../List/List';\r\n\r\nclass Input extends Component {\r\n\r\n    state = {\r\n        items : [],\r\n        inputValue : ''\r\n    }\r\n\r\n    buttonClickedHandler = () => {\r\n        let input = this.state.inputValue;\r\n        this.setState({items: this.state.items.concat(input)});\r\n    }\r\n\r\n    getValueHandler = (e) => {\r\n        this.setState({inputValue: e.target.value})\r\n    }\r\n\r\n\r\n    render() {\r\n        const data = this.state.items.map((item,index) => {\r\n            return <p key={index}>{item}</p>;\r\n        })\r\n\r\n\r\n        return (\r\n            <div >\r\n            <input className={styles.Input} type=\"text\" id=\"input\" onChange={this.getValueHandler} required></input>\r\n            <Button clicked={this.buttonClickedHandler}><b>+</b></Button>\r\n            <List>{data}</List>\r\n            </div>\r\n        );\r\n        };\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Input from './components/Input/Input';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Input />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}