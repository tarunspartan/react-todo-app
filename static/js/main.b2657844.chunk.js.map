{"version":3,"sources":["components/Input/Input.module.css","components/Button/Button.module.css","components/List/List.module.css","components/DeleteButton/DeleteButton.module.css","components/Button/Button.js","components/List/List.js","components/DeleteButton/DeleteButton.js","components/Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","className","styles","Button","onClick","clicked","children","List","this","Component","deleteButton","Input","useState","value","setValue","JSON","parse","localStorage","getItem","todoList","setTodoList","useEffect","setItem","stringify","Main","type","placeholder","onChange","event","target","required","concat","map","item","index","key","DeleteButton","i","modifiedList","filter","data","deleteHandler","Empty","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b2657844.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3OQIc\",\"Main\":\"Input_Main__DG8cg\",\"Empty\":\"Input_Empty__6aBRX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__ATGL8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__1AALv\",\"example\":\"List_example__1m1kc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"DeleteButton_Button__16XJb\"};","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nconst button = (props) => (\r\n        <button className={styles.Button} onClick={props.clicked}>{props.children}</button>\r\n);\r\n\r\nexport default button;","import React, { Component } from 'react';\r\n\r\nimport styles from './List.module.css';\r\n\r\nclass List extends Component {\r\n     render() {\r\n          return (\r\n               <p className={styles.List}>{this.props.children}</p>\r\n          )\r\n     }\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nimport styles from './DeleteButton.module.css'\r\n\r\nconst deleteButton = (props) => (\r\n    <button className={styles.Button} onClick={props.clicked}>{props.children}</button>\r\n)\r\n\r\nexport default deleteButton;","import React, { useState, useEffect } from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nimport Button from '../Button/Button';\r\nimport List from '../List/List';\r\nimport DeleteButton from '../DeleteButton/DeleteButton';\r\n\r\nconst Input = props => {\r\n    const [value , setValue] = useState('');\r\n    const [todoList, setTodoList] = useState(JSON.parse(localStorage.getItem(\"todoItems\")) || []);\r\n\r\n    useEffect(()=> {\r\n        localStorage.setItem(\"todoItems\",JSON.stringify(todoList))\r\n    })\r\n\r\n    const getValueHandler = event => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const buttonClickedHandler = () => {\r\n        if(value){\r\n            setTodoList(todoList.concat(value));\r\n            setValue('');\r\n        }\r\n    }\r\n\r\n    const deleteHandler = (i) => {\r\n        const modifiedList = todoList.filter(data => data !== todoList[i]);\r\n        setTodoList(modifiedList);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.Main}>\r\n            <input className={styles.Input} type=\"text\" placeholder=\"Add a to-do list...\" value={value} onChange={getValueHandler} required></input>\r\n            <Button className={styles.Button} clicked={buttonClickedHandler}><b>+</b></Button></div>\r\n            \r\n            { todoList ? todoList.map((item,index) => {\r\n                return <List key={index}>{item}<DeleteButton clicked={() => {deleteHandler(index)}}><b>-</b></DeleteButton></List>\r\n            })  : <h1 className={styles.Empty}>Add some Tasks...</h1> }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Input;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Input from './components/Input/Input';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Input />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}